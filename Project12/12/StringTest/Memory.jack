// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	//static int nextadd;
	static int freeList;
	
	
    /** Initializes the class. */
    function void init() {
		let freeList = 2048;
		//let block = freeList;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return address[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let address[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int allocc(int size) {
    
		  var int block, blockSize;

    let block = freeList;
    let blockSize = Memory.peek(block + 1);

    if ((blockSize > size) | (blockSize = size) ) {
        let freeList = Memory.peek(block);
        do Memory.poke(block + 1, size);
        do Memory.poke(block, 0); 

        return block + 2;
    }

    return -1; 
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
    var int block;
    let block = o - 2;
    do Memory.poke(block, freeList); 
    let freeList = block;            

    return;
	
    }    
}
