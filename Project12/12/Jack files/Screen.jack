// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color; 

    /** Initializes the Screen. */
    function void init() {
		let color = true; 
        return;

    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int address;

        let address = 16384;
        while (address < 24576) { 
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int wordX;
		var int bit;
		var int mask;
		var int address;
		var int value;
		var int temp;
		var int mask, i;

		let wordX = x / 16;
		let address = 16384 + wordX + (y * 32);

		let temp = x / 16;
		let bit = x - (temp * 16);
		
		let mask = 1;
		let i = 0;
		while (i < bit) {
			let mask = mask + mask; // same as mask *= 2
			let i = i + 1;
		}    let value = Memory.peek(address);

		if (color) {
			let value = value | mask;
		} else {
			let value = value & (~mask);
		}

		do Memory.poke(address, value);
		return;

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int x, y;

        if (x1 = x2) {
            let y = y1;
        while ((y < y2) | (y = y2)) {
            do Screen.drawPixel(x1, y);
            let y = y + 1;
        }

        } else {
            let x = x1;
            while ((x<x2) |(x=x2)) {
                do Screen.drawPixel(x, y1);
                let x = x + 1;
            }
        }

        return;

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int y;

        let y = y1;
        while ((y<y2)|(y=y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }

        return;

    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dx, dy;

        let dy = -r;
        while ((dy<r)|(dy=r)) {
            let dx = -r;
            while ((dx<r)|(dx=r)) {
                if (((dx * dx + dy * dy) - (r * r)) < 1) {
                    do Screen.drawPixel(x + dx, y + dy);
                }
                let dx = dx + 1;
            }
            let dy = dy + 1;
        }

        return;
    

    }
}
