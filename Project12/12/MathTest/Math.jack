// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
	return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
		 var int result, i;
        let result = 0;
        let i = 0;

	while (i < y) {
            let result = result + x;
            let i = i + 1;
        }

        return result;

    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
		 var int q, doubleY, x2qY;

		if (y > x) {
			return 0;
		}

		let doubleY = y + y;
		let q = Math.divide(x, doubleY);
		let x2qY = x - ((q + q) * y);

		if ((x2qY < y)) {
			return q + q;
		} else {
			return q + q + 1;
		}

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		 var int y, j, power, tryY, square, k;

		let y = 0;
		let j = 7;

		while ((j > 0) | (j=0)) {
			// compute power = 2^j
			let power = 1;
			let k = 0;
			while (k < j) {
				let power = power + power;
				let k = k + 1;
			}

        let tryY = y + power;
        let square = tryY * tryY;

        if ((square < x) | (square = x)) {
            let y = tryY;
        }

        let j = j - 1;
		}

		return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
		if(a>b){
		return a;}
		return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
		if(a<b){
		return a;}
		return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x<0){
		return 0-x;}
		return x;
    }
}
