// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
	field Array array;
    field int length;


    constructor String new(int maxLength) {
		let array = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do array.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;

    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return array.get(j);

    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		do array.set(j,c);
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		do array.set(length, c);
        let length = length + 1;
        return this;
		
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	 var int i, digit, value;
        let i = 0;
        let value = 0;

        while (i < length) {
            let digit = array.get(i);
            if (digit < 48) {
                return value;
            }
            if (digit > 57) {
                return value;
            }
            let value = value * 10 + (digit - 48);
            let i = i + 1;
        }
        return value;

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	var int q, r, n, qDiv10;
        var Array digits;
        var int i;

        let length = 0;

        if (val = 0) {
            do appendChar(48); 
            return;
        }

        let n = val;
        let digits = Array.new(5); 
        let q = n;

        while (q > 0) {

        let qDiv10 = q / 10;
        let r = q - (qDiv10 * 10);
            do digits.set(length, r + 48);
            let length = length + 1;
            let q = q / 10;
        }

        
        let i = 0;
        while (i < length) {
            do appendChar(digits.get(length - i - 1));
            let i = i + 1;
        }

        do digits.dispose();
        return;

    }

    /** Returns the new line character. */
    function char newLine() {
	        return 10;

    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 8;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	        return 34;

    }
}
